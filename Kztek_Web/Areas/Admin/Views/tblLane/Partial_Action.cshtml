

@model Kztek_Library.Models.PartialActionModel<Kztek_Model.Models.tblLane_Submit>

@{
    var action = Model.Action;
    var controller = Model.Controller;
    ViewBag.Title = action.Contains("Create") ? await Component.InvokeAsync("Language", new { path = "BODY:BUTTON:CREATE" })
                                              : await Component.InvokeAsync("Language", new { path = "BODY:BUTTON:UPDATE" });
    int pn = Model.Page;
}

<div class="page-header">
    <h1>
        @ViewBag.Title
    </h1>
</div>

<div class="row">
    @if (TempData["Success"] != null)
    {
        <strong style="color:green">@TempData["Success"]</strong>
    }
    <strong style="color:red">@ViewBag.Error</strong>
</div>

<div class="row">
    <div class="col-xs-12">
        @using (Html.BeginForm(action, controller, FormMethod.Post, new { encType = "multipart/form-data", @class = "form-horizontal", @role = "form" }))
        {
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            @*@Html.Hidden("LaneID", Model.Model.id.ToString())*@
            @Html.Hidden("SaveAndCountinue", false)


            <div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> Mã làn </label>
                <div class="col-sm-3 col-xs-12">
                    @Html.TextBox("lane_Code", Model.Model.lane_Code, new { @class = "form-control", @placeholder = "Code" })
                    @Html.ValidationMessage("lane_Code", "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> @await Component.InvokeAsync("Language", new { path = "BODY:SEARCH:LANE" })<span class="error">*</span> </label>
                <div class="col-sm-3 col-xs-12">
                    @Html.TextBox("lane_Name", Model.Model.lane_Name, new { @class = "form-control", @placeholder = "Name" })
                    @Html.ValidationMessage("lane_Name", "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> C1.LPR</label>
                <div class="col-sm-3 col-xs-12">
                    @await Component.InvokeAsync("ChosenSelect", Model.Data_Select_1)
                </div>

            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> C2.LPR</label>
                <div class="col-sm-3 col-xs-12">
                    @await Component.InvokeAsync("ChosenSelect", Model.Data_Select_2)
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> C1.Panorama</label>
                <div class="col-sm-3 col-xs-12">
                    @await Component.InvokeAsync("ChosenSelect", Model.Data_Select_3)
                </div>

            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> C2.Panorama</label>
                <div class="col-sm-3 col-xs-12">
                    @await Component.InvokeAsync("ChosenSelect", Model.Data_Select_4)
                </div>
            </div>


            <div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> Miêu tả </label>
                <div class="col-sm-3 col-xs-12">
                    @Html.TextBox("description", Model.Model.description, new { @class = "form-control", @placeholder = "Miêu tả" })
                    @Html.ValidationMessage("description", "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"></label>
                <div class="col-sm-7">
                    <label class="line-height-250">
                        @Html.CheckBox("IsLoop", Model.Model.IsLoop, new { @class = "ace input-lg" })
                        <span class="lbl"> @await Component.InvokeAsync("Language", new { path = "BODY:TABLE:IsLoop" })</span>
                    </label>
                </div>
            </div>*@


            @*<div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> </label>
                <div class="col-sm-7">
                    <label class="line-height-250">
                        @Html.CheckBox("IsLED", Model.Model.IsLED, new { @class = "ace input-lg" })
                        <span class="lbl"> @await Component.InvokeAsync("Language", new { path = "BODY:TABLE:IsLED" })</span>
                    </label>
                </div>
            </div>*@
            @*<div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> </label>
                <div class="col-sm-7">
                    <label class="line-height-250">
                        @Html.CheckBox("AccessForEachSide", Model.Model.AccessForEachSide, new { @class = "ace input-lg" })
                        <span class="lbl"> @await Component.InvokeAsync("Language", new { path = "BODY:TABLE:AccessForEachSide" })</span>
                    </label>
                </div>
            </div>*@
            @*<div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"></label>
                <div class="col-sm-7">
                    <label class="line-height-250">
                        @Html.CheckBox("IsFaceRecognize", Model.Model.IsFaceRecognize, new { @class = "ace input-lg" })
                        <span class="lbl"> @await Component.InvokeAsync("Language", new { path = "BODY:TABLE:IsFaceRecognize" })</span>
                    </label>
                </div>
            </div>*@
            @*<div class="form-group">
                <label class="col-sm-3 control-label no-padding-right"> </label>
                <div class="col-sm-7">
                    <label class="block">
                        @Html.CheckBox("Inactive", Model.Model.Inactive, new { @class = "ace input-lg" })
                        <span class="lbl"> @await Component.InvokeAsync("Language", new { path = "BODY:TABLE:INACTIVE" }) </span>
                    </label>
                </div>
            </div>*@



            @await Html.PartialAsync("~/Views/Shared/Partials/ButtonPartial.cshtml", new Kztek_Library.Models.AuthPartialModel()
            {
          ControllerName = controller,
          ActionName = action,
          RecordId = "",
          model = new { AreaCode = ViewBag.AreaCodeValue },
          Auth_Value = null
      })

        }
    </div>
</div>

